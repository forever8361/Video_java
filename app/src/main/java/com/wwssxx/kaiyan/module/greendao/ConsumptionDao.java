package com.wwssxx.kaiyan.module.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wwssxx.kaiyan.model.modelforvideo.Consumption;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONSUMPTION".
*/
public class ConsumptionDao extends AbstractDao<Consumption, Long> {

    public static final String TABLENAME = "CONSUMPTION";

    /**
     * Properties of entity Consumption.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, Long.class, "keyId", true, "_id");
        public final static Property CollectionCount = new Property(1, int.class, "collectionCount", false, "COLLECTION_COUNT");
        public final static Property ShareCount = new Property(2, int.class, "shareCount", false, "SHARE_COUNT");
        public final static Property ReplyCount = new Property(3, int.class, "replyCount", false, "REPLY_COUNT");
    }


    public ConsumptionDao(DaoConfig config) {
        super(config);
    }
    
    public ConsumptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONSUMPTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyId
                "\"COLLECTION_COUNT\" INTEGER NOT NULL ," + // 1: collectionCount
                "\"SHARE_COUNT\" INTEGER NOT NULL ," + // 2: shareCount
                "\"REPLY_COUNT\" INTEGER NOT NULL );"); // 3: replyCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONSUMPTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Consumption entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getCollectionCount());
        stmt.bindLong(3, entity.getShareCount());
        stmt.bindLong(4, entity.getReplyCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Consumption entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getCollectionCount());
        stmt.bindLong(3, entity.getShareCount());
        stmt.bindLong(4, entity.getReplyCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Consumption readEntity(Cursor cursor, int offset) {
        Consumption entity = new Consumption( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyId
            cursor.getInt(offset + 1), // collectionCount
            cursor.getInt(offset + 2), // shareCount
            cursor.getInt(offset + 3) // replyCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Consumption entity, int offset) {
        entity.setKeyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCollectionCount(cursor.getInt(offset + 1));
        entity.setShareCount(cursor.getInt(offset + 2));
        entity.setReplyCount(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Consumption entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Consumption entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Consumption entity) {
        return entity.getKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
