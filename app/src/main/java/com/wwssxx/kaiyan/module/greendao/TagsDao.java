package com.wwssxx.kaiyan.module.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.wwssxx.kaiyan.model.modelforvideo.Tags;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAGS".
*/
public class TagsDao extends AbstractDao<Tags, Long> {

    public static final String TABLENAME = "TAGS";

    /**
     * Properties of entity Tags.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, Long.class, "keyId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ActionUrl = new Property(4, String.class, "actionUrl", false, "ACTION_URL");
        public final static Property AdTrack = new Property(5, String.class, "adTrack", false, "AD_TRACK");
    }

    private Query<Tags> video_TagsQuery;

    public TagsDao(DaoConfig config) {
        super(config);
    }
    
    public TagsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"CUSTOMER_ID\" INTEGER NOT NULL ," + // 2: customerId
                "\"NAME\" TEXT," + // 3: name
                "\"ACTION_URL\" TEXT," + // 4: actionUrl
                "\"AD_TRACK\" TEXT);"); // 5: adTrack
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tags entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getCustomerId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String actionUrl = entity.getActionUrl();
        if (actionUrl != null) {
            stmt.bindString(5, actionUrl);
        }
 
        String adTrack = entity.getAdTrack();
        if (adTrack != null) {
            stmt.bindString(6, adTrack);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tags entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getCustomerId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String actionUrl = entity.getActionUrl();
        if (actionUrl != null) {
            stmt.bindString(5, actionUrl);
        }
 
        String adTrack = entity.getAdTrack();
        if (adTrack != null) {
            stmt.bindString(6, adTrack);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tags readEntity(Cursor cursor, int offset) {
        Tags entity = new Tags( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyId
            cursor.getInt(offset + 1), // id
            cursor.getLong(offset + 2), // customerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // actionUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // adTrack
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tags entity, int offset) {
        entity.setKeyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setCustomerId(cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setActionUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdTrack(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tags entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tags entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tags entity) {
        return entity.getKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tags" to-many relationship of Video. */
    public List<Tags> _queryVideo_Tags(long customerId) {
        synchronized (this) {
            if (video_TagsQuery == null) {
                QueryBuilder<Tags> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerId.eq(null));
                video_TagsQuery = queryBuilder.build();
            }
        }
        Query<Tags> query = video_TagsQuery.forCurrentThread();
        query.setParameter(0, customerId);
        return query.list();
    }

}
