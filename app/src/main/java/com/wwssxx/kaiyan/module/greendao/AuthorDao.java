package com.wwssxx.kaiyan.module.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wwssxx.kaiyan.model.modelforvideo.Follow;

import com.wwssxx.kaiyan.model.modelforvideo.Author;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTHOR".
*/
public class AuthorDao extends AbstractDao<Author, Long> {

    public static final String TABLENAME = "AUTHOR";

    /**
     * Properties of entity Author.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, Long.class, "keyId", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property CustomerId = new Property(2, long.class, "customerId", false, "CUSTOMER_ID");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Link = new Property(6, String.class, "link", false, "LINK");
        public final static Property LatestReleaseTime = new Property(7, long.class, "latestReleaseTime", false, "LATEST_RELEASE_TIME");
        public final static Property VideoNum = new Property(8, int.class, "videoNum", false, "VIDEO_NUM");
        public final static Property AdTrack = new Property(9, String.class, "adTrack", false, "AD_TRACK");
    }

    private DaoSession daoSession;


    public AuthorDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTHOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"CUSTOMER_ID\" INTEGER NOT NULL ," + // 2: customerId
                "\"ICON\" TEXT," + // 3: icon
                "\"NAME\" TEXT," + // 4: name
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"LINK\" TEXT," + // 6: link
                "\"LATEST_RELEASE_TIME\" INTEGER NOT NULL ," + // 7: latestReleaseTime
                "\"VIDEO_NUM\" INTEGER NOT NULL ," + // 8: videoNum
                "\"AD_TRACK\" TEXT);"); // 9: adTrack
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTHOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Author entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getCustomerId());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
        stmt.bindLong(8, entity.getLatestReleaseTime());
        stmt.bindLong(9, entity.getVideoNum());
 
        String adTrack = entity.getAdTrack();
        if (adTrack != null) {
            stmt.bindString(10, adTrack);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Author entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getCustomerId());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
        stmt.bindLong(8, entity.getLatestReleaseTime());
        stmt.bindLong(9, entity.getVideoNum());
 
        String adTrack = entity.getAdTrack();
        if (adTrack != null) {
            stmt.bindString(10, adTrack);
        }
    }

    @Override
    protected final void attachEntity(Author entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Author readEntity(Cursor cursor, int offset) {
        Author entity = new Author( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyId
            cursor.getLong(offset + 1), // id
            cursor.getLong(offset + 2), // customerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // link
            cursor.getLong(offset + 7), // latestReleaseTime
            cursor.getInt(offset + 8), // videoNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // adTrack
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Author entity, int offset) {
        entity.setKeyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setCustomerId(cursor.getLong(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatestReleaseTime(cursor.getLong(offset + 7));
        entity.setVideoNum(cursor.getInt(offset + 8));
        entity.setAdTrack(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Author entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Author entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Author entity) {
        return entity.getKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFollowDao().getAllColumns());
            builder.append(" FROM AUTHOR T");
            builder.append(" LEFT JOIN FOLLOW T0 ON T.\"CUSTOMER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Author loadCurrentDeep(Cursor cursor, boolean lock) {
        Author entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Follow follow = loadCurrentOther(daoSession.getFollowDao(), cursor, offset);
         if(follow != null) {
            entity.setFollow(follow);
        }

        return entity;    
    }

    public Author loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Author> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Author> list = new ArrayList<Author>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Author> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Author> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
