package com.wwssxx.kaiyan.module.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wwssxx.kaiyan.model.modelforvideo.Cover;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COVER".
*/
public class CoverDao extends AbstractDao<Cover, Long> {

    public static final String TABLENAME = "COVER";

    /**
     * Properties of entity Cover.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, Long.class, "keyId", true, "_id");
        public final static Property Feed = new Property(1, String.class, "feed", false, "FEED");
        public final static Property Detail = new Property(2, String.class, "detail", false, "DETAIL");
        public final static Property Blurred = new Property(3, String.class, "blurred", false, "BLURRED");
        public final static Property Sharing = new Property(4, String.class, "sharing", false, "SHARING");
    }


    public CoverDao(DaoConfig config) {
        super(config);
    }
    
    public CoverDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COVER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyId
                "\"FEED\" TEXT," + // 1: feed
                "\"DETAIL\" TEXT," + // 2: detail
                "\"BLURRED\" TEXT," + // 3: blurred
                "\"SHARING\" TEXT);"); // 4: sharing
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cover entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
 
        String feed = entity.getFeed();
        if (feed != null) {
            stmt.bindString(2, feed);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
 
        String blurred = entity.getBlurred();
        if (blurred != null) {
            stmt.bindString(4, blurred);
        }
 
        String sharing = entity.getSharing();
        if (sharing != null) {
            stmt.bindString(5, sharing);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cover entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
 
        String feed = entity.getFeed();
        if (feed != null) {
            stmt.bindString(2, feed);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
 
        String blurred = entity.getBlurred();
        if (blurred != null) {
            stmt.bindString(4, blurred);
        }
 
        String sharing = entity.getSharing();
        if (sharing != null) {
            stmt.bindString(5, sharing);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cover readEntity(Cursor cursor, int offset) {
        Cover entity = new Cover( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // feed
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blurred
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sharing
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cover entity, int offset) {
        entity.setKeyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFeed(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlurred(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSharing(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cover entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cover entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cover entity) {
        return entity.getKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
