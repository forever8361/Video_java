package com.wwssxx.kaiyan.module.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wwssxx.kaiyan.model.modelforvideo.Follow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOLLOW".
*/
public class FollowDao extends AbstractDao<Follow, Long> {

    public static final String TABLENAME = "FOLLOW";

    /**
     * Properties of entity Follow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, Long.class, "keyId", true, "_id");
        public final static Property ItemType = new Property(1, String.class, "itemType", false, "ITEM_TYPE");
        public final static Property ItemId = new Property(2, int.class, "itemId", false, "ITEM_ID");
        public final static Property Followed = new Property(3, boolean.class, "followed", false, "FOLLOWED");
    }


    public FollowDao(DaoConfig config) {
        super(config);
    }
    
    public FollowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOLLOW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyId
                "\"ITEM_TYPE\" TEXT," + // 1: itemType
                "\"ITEM_ID\" INTEGER NOT NULL ," + // 2: itemId
                "\"FOLLOWED\" INTEGER NOT NULL );"); // 3: followed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOLLOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Follow entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
 
        String itemType = entity.getItemType();
        if (itemType != null) {
            stmt.bindString(2, itemType);
        }
        stmt.bindLong(3, entity.getItemId());
        stmt.bindLong(4, entity.getFollowed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Follow entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
 
        String itemType = entity.getItemType();
        if (itemType != null) {
            stmt.bindString(2, itemType);
        }
        stmt.bindLong(3, entity.getItemId());
        stmt.bindLong(4, entity.getFollowed() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Follow readEntity(Cursor cursor, int offset) {
        Follow entity = new Follow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemType
            cursor.getInt(offset + 2), // itemId
            cursor.getShort(offset + 3) != 0 // followed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Follow entity, int offset) {
        entity.setKeyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemId(cursor.getInt(offset + 2));
        entity.setFollowed(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Follow entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Follow entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Follow entity) {
        return entity.getKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
